name: Release

on:
  release:
    types: [created]

permissions:
  contents: write

jobs:
  build-linux:
    name: Build Linux binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: Install cross-compilation tools
      if: matrix.arch == 'arm64'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu

    - name: Build binaries
      run: |
        # Build Go binary
        GOOS=linux GOARCH=${{ matrix.arch }} CGO_ENABLED=0 \
          go build -ldflags="-s -w -X main.version=${{ github.event.release.tag_name }}" \
          -o wrapguard .
        
        # Build C library
        if [ "${{ matrix.arch }}" = "arm64" ]; then
          aarch64-linux-gnu-gcc -fPIC -shared -Wall -O2 \
            -o libwrapguard.so lib/intercept.c -ldl -lpthread
        else
          gcc -fPIC -shared -Wall -O2 \
            -o libwrapguard.so lib/intercept.c -ldl -lpthread
        fi

    - name: Create release archive
      run: |
        chmod +x wrapguard
        tar -czf wrapguard-linux-${{ matrix.arch }}.tar.gz \
          wrapguard libwrapguard.so README.md example-wg0.conf

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./wrapguard-linux-${{ matrix.arch }}.tar.gz
        asset_name: wrapguard-linux-${{ matrix.arch }}.tar.gz
        asset_content_type: application/gzip

  build-macos:
    name: Build macOS binaries
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: Build binaries
      run: |
        # Build Go binary
        GOOS=darwin GOARCH=${{ matrix.arch }} CGO_ENABLED=0 \
          go build -ldflags="-s -w -X main.version=${{ github.event.release.tag_name }}" \
          -o wrapguard .
        
        # Build C library (dylib for macOS)
        clang -fPIC -shared -Wall -O2 \
          -o libwrapguard.dylib lib/intercept.c -ldl -lpthread

    - name: Create release archive
      run: |
        chmod +x wrapguard
        tar -czf wrapguard-darwin-${{ matrix.arch }}.tar.gz \
          wrapguard libwrapguard.dylib README.md example-wg0.conf

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./wrapguard-darwin-${{ matrix.arch }}.tar.gz
        asset_name: wrapguard-darwin-${{ matrix.arch }}.tar.gz
        asset_content_type: application/gzip

  build-windows:
    name: Build Windows binary (reference only)
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: Build Windows binary
      run: |
        $env:GOOS = "windows"
        $env:GOARCH = "amd64"
        $env:CGO_ENABLED = "0"
        go build -ldflags="-s -w -X main.version=${{ github.event.release.tag_name }}" -o wrapguard.exe .

    - name: Create release archive
      run: |
        New-Item -ItemType Directory -Force -Path release
        Copy-Item wrapguard.exe, README.md, example-wg0.conf -Destination release/
        Add-Content -Path release/WINDOWS_NOTES.txt -Value "Note: LD_PRELOAD is not supported on Windows. This binary is for reference only."
        Compress-Archive -Path release/* -DestinationPath wrapguard-windows-amd64.zip

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./wrapguard-windows-amd64.zip
        asset_name: wrapguard-windows-amd64.zip
        asset_content_type: application/zip
